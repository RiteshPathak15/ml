practical 1

a) CeasarCipher

package caesarCipher;
import java.util.Scanner;
public class CaesarCipher {

    int total_alphabet = 26, keys = 3;
    String encrypted = " ", decrypted = " ";
    char ch;

    public String ecrypt(String plain) {
        for (int i = 0; i < plain.length(); i++) {
            ch = plain.charAt(i);
            if (ch == ' ') {
                encrypted += "-";
            } else if (ch >= 'A' && ch <= 'Z') {
                if (ch <= 'Z' - keys) {
                    encrypted += String.valueOf((char) (ch + keys));
                } else {
                    encrypted += String.valueOf((char) (ch - (total_alphabet - keys)));
                }
            } else {
                encrypted += String.valueOf(ch);
            }
        }
        return encrypted;
    }

    public String decrypt(String cipher) {
        for (int i = 0; i < cipher.length(); i++) {
            ch = cipher.charAt(i);
            if (ch == '-') {
                decrypted += " ";
            } else if (ch >= 'A' && ch <= 'Z') {
                if (ch >= 'A' + keys) {
                    decrypted += String.valueOf((char) (ch - keys));
                } else {
                    decrypted += String.valueOf((char) (ch + (total_alphabet - keys)));
                }
            } else {
                decrypted += String.valueOf(ch);
            }
        }
        return decrypted;
    }

    public static void main(String[] args) {
        String plaintext, ciphertext;
        CaesarCipher cc = new CaesarCipher();
        System.out.println("Enter text:");
        plaintext = new Scanner(System.in).nextLine().toUpperCase();
        ciphertext = cc.ecrypt(plaintext);
        System.out.println("Encrypted text:" + ciphertext);
        plaintext = cc.decrypt(ciphertext);
        System.out.println("Decrypted text:" + plaintext);
    }
}


B)MODIFIED CEASERCIPHER
package modifiedCaesar;

import java.util.Scanner;

public class ModifiedCaesar {

    int total_alphabets = 26, key = 3;
    String encrytped = " ", decrypted = " ";
    char ch;

    public String encrypt(String plain, int key) {
        for (int i = 0; i < plain.length(); i++) {
            ch = plain.charAt(i);
            if (ch == ' ') {
                encrytped += "-";
            } else if (ch >= 'A' && ch <= 'z') {
                {
                    if (ch <= 'z' - key) {
                        encrytped += String.valueOf((char) (ch + key));
                    } else {
                        encrytped += String.valueOf((char) (ch - (total_alphabets - key)));
                    }
                }
            } else {
                encrytped += String.valueOf(ch);
            }
        }
        return encrytped;
    }

    public String decrypt(String cipher, int key) {
        for (int i = 0; i < cipher.length(); i++) {
            ch = cipher.charAt(i);
            if (ch == '-') {
                decrypted += " ";
            } else if (ch >= 'A' && ch <= 'z') {
                if (ch >= 'A' + key) {
                    decrypted += String.valueOf((char) (ch - key));
                } else {
                    decrypted += String.valueOf((char) (ch + (total_alphabets - key)));
                }
            } else {
                decrypted += String.valueOf(ch);
            }
        }
        return decrypted;
    }

    public static void main(String[] args) {
        String plaintext, ciphertext;
        ModifiedCaesar cc = new ModifiedCaesar();
        System.out.print("Enter a Text : ");
        plaintext = new Scanner(System.in).nextLine().toUpperCase();
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a Key : ");
        cc.key = sc.nextInt();
        ciphertext = cc.encrypt(plaintext, cc.key);
        System.out.println("\nEncrypted Text : " + ciphertext);
        plaintext = cc.decrypt(ciphertext, cc.key);
        System.out.println("Decrypted Text : " + plaintext);
    }
}


C)MONOALPHABATIC
package monoalphabeticcipher;

import java.util.*;

public class MonoalphabeticCipher {

    public static char p[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v', 'w', 'x', 'y', 'z'};
    public static char[] ch = {'Z', 'A', 'B', 'Y', 'C', 'X', 'D', 'W', 'E', 'V',
        'F', 'U', 'G', 'T', 'H', 'S', 'I', 'R', 'J', 'Q',
        'K', 'P', 'L', 'O', 'M', 'N'};

    public static String doEncrypt(String s) {
        char c[] = new char[(s.length())];
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j < 26; j++) {
                if (p[j] == s.charAt(i)) {
                    c[i] = ch[j];
                    break;
                }
            }
        }
        return new String(c);
    }

    public static String doDecrypt(String s) {
        char p1[] = new char[(s.length())];
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j < 26; j++) {
                if (ch[j] == s.charAt(i)) {
                    p1[i] = p[j];
                    break;
                }
            }
        }
        return new String(p1);

    }

    public static void main(String[] args) {
        MonoalphabeticCipher j = new MonoalphabeticCipher();
        System.out.println("Enter plain text: ");
        String plain = new Scanner(System.in).nextLine().toLowerCase();
        String en = j.doEncrypt(plain);
        System.out.println("Encrypted Tex: " + (j.doEncrypt(plain)));
        System.out.println("Decrypted text: " + (j.doDecrypt(en)));
    }

}

D)POLY-ALPHABETIC

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */
package polyalphabeticcipher;

import java.util.*;

public class PolyalphabeticCipher {

    public void encrypt(String test, int key) {
        int[] s = new int[test.length()];
        int[] j = new int[test.length()];
        for (int i = 0; i < test.length(); i++) {
            char c = test.charAt(i);
            s[i] = (int) c - 65;
        }

        j[0] = key;
        System.out.println("The position of each character in the cipher text:");

        for (int i = 0; i < test.length(); i++) {
            if (i == 0) {
                j[i] = j[i] + s[i];
            } else {
                j[i] = j[i - 1] + s[i];
            }
            j[i] = j[i] % 26;
            System.out.println(j[i]);
        }

        System.out.println("\nThe cipher text:");
        for (int i = 0; i < test.length(); i++) {

            char cipherChar = (char) (j[i] + 65);
            System.out.print(cipherChar);
        }
        System.out.println();
    }

    public static void main(String[] args) {
        PolyalphabeticCipher prac = new PolyalphabeticCipher();
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string to encrypt (uppercase only): ");
        String input = scanner.nextLine().toUpperCase();
        System.out.print("Enter the key (integer): ");
        int key = scanner.nextInt();
        prac.encrypt(input, key);
    }
}



PRACTICAL 2

A) RAIL FENCE TECHNIQUE

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */
package javaapplication49;

import java.util.Scanner;

public class JavaApplication49 {

    String evenchar = "", oddchar = "", encrypted = "", decrypted = "";
    int i, j = 0, b = 0, k = 0;

    public String encrypt(String plaintext) {
        for (i = 0; i < plaintext.length(); i += 2) {
            evenchar += String.valueOf(plaintext.charAt(i));
        }
        for (i = 1; i < plaintext.length(); i += 2) {
            oddchar += String.valueOf(plaintext.charAt(i));
        }
        encrypted = evenchar + oddchar;
        return encrypted;
    }

    public String decrypt(String ciphertext) {
        for (i = 0; i < ciphertext.length(); i++) {
            if (i % 2 == 0) {
                decrypted += String.valueOf(evenchar.charAt(j++));
            }
            if (i % 2 != 0) {
                decrypted += String.valueOf(oddchar.charAt(k++));
            }
        }
        return decrypted;
    }

    public static void main(String[] args) {
        JavaApplication49 rf = new JavaApplication49();
        System.out.println("Enter Text:");
        String plain = new Scanner(System.in).nextLine().toUpperCase();
        String encryptedString = rf.encrypt(plain);
        System.out.println("The Encrypted Text is:" + encryptedString);
        System.out.println("The Decrypted Text is:" + rf.decrypt(encryptedString));
    }
}


B)SIMPLE COLUMNAR

package simplecolumnar;

import java.util.Scanner;

public class Simplecolumnar {

    String encrypted = "", decrypted = "";
    int i, j, k;
    char chmat[][], ch;

    public String encrypt(String plain, int columns) {
        if (columns >= plain.length() || columns == 1) {
            return plain;
        }
        int rows = (int) (Math.ceil(plain.length() / (float) columns));
        chmat = new char[(int) rows][columns];
        k = 0;
        for (i = 0; i < rows; i++) {
            abc:
            for (j = 0; j < columns; j++) {
                if (k >= plain.length()) {
                    break abc;
                } else {
                    chmat[i][j] = plain.charAt(k);
                }
                k++;
            }
        }
        for (i = 0; i < columns; i++) {
            for (j = 0; j < rows; j++) {
                ch = chmat[j][i];
                if (ch == '_') {
                    encrypted += '_';

                } else {
                    encrypted += ch;
                }
            }
        }
        return encrypted;
    }

    public String decrypt(String cipher, int columns) {
        int rows = columns;
        int cols = (int) (Math.ceil(cipher.length() / (float) rows));
        chmat = new char[rows][cols];
        k = 0;
        abc:
        for (int i = 0; i < rows; i++) {
            for (j = 0; j < cols; j++) {
                if (k >= cipher.length()) {
                    break abc;
                } else {
                    chmat[i][j] = cipher.charAt(k);
                }
                k++;
            }
        }
        for (i = 0; i < cols; i++) {
            for (j = 0; j < rows; j++) {
                ch = chmat[j][i];
                if (ch == '_') {
                    decrypted += '_';
                } else {
                    decrypted += ch;
                }
            }
        }
        return decrypted;
    }

    public static void main(String[] args) {
        String plaintext, ciphertext;
        int columns;
        Simplecolumnar cc = new Simplecolumnar();
        System.out.print("Enter Text : ");
        plaintext = new Scanner(System.in).nextLine().toUpperCase();
        System.out.print("Enter Number of Columns : ");
        columns = new Scanner(System.in).nextInt();
        ciphertext = cc.encrypt(plaintext, columns);
        System.out.println("Encrypted Text : " + ciphertext);
        plaintext = cc.decrypt(ciphertext, columns);
        System.out.println("Decrypted Text : " + plaintext);
    }
}

C)VERNAM CIPHER

package vernum;

import java.util.*;

public class Vernum {

    public static void main(String[] args) {
        String plaintext = "ABCDEFGH";
        String secretkey = "HTIHSRAH";
        System.out.println("Plain Text Before Encryption : " + plaintext);
        String encryptedtext = encrypt(plaintext, secretkey);
        System.out.println("Encrypted Text After Encryption : " + encryptedtext);
        String decryptedtext = decrypt(encryptedtext, secretkey);
        System.out.println("Decrypted Text After Decryption : " + decryptedtext);
    }

    private static String encrypt(String plaintext, String secretkey) {
        StringBuffer encryptedString = new StringBuffer();
        int encryptedInt;
        for (int i = 0; i < plaintext.length(); i++) {
            int plaintextInt = (int) (plaintext.charAt(i));
            int secretkeyInt = (int) (secretkey.charAt(i));
            encryptedInt = (plaintextInt + secretkeyInt) % 26;
            encryptedString.append((char) ((encryptedInt) + (int) 'A'));
        }
        return encryptedString.toString();
    }

    private static String decrypt(String decryptedtext, String secretkey) {
        StringBuffer decryptedString = new StringBuffer();
        int decryptedInt;
        for (int i = 0; i < decryptedtext.length(); i++) {
            int decryptedtextInt = (int) (decryptedtext.charAt(i));
            int secretkeyInt = (int) (secretkey.charAt(i));
            decryptedInt = decryptedtextInt - secretkeyInt;
            if (decryptedInt < 0) {
                decryptedInt += 26;
            }
            decryptedString.append((char) ((decryptedInt) + (int) 'A'));
        }
        return decryptedString.toString();
    }
}



PRACTICAL 3

DES-ALGO

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;

public class DES {

    public static void main(String[] args) throws Exception {
        KeyGenerator keyGenerator = KeyGenerator.getInstance("DES");
        SecretKey secretKey = keyGenerator.generateKey();
        Cipher cipher = Cipher.getInstance("DES");
        String inputText = JOptionPane.showInputDialog("Enter text to encrypt:");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey); // Initialize in encryption mode
        byte[] encryptedText = cipher.doFinal(inputText.getBytes());
        cipher.init(Cipher.DECRYPT_MODE, secretKey); // Initialize in decryption mode
        byte[] decryptedText = cipher.doFinal(encryptedText);
        String message = "Original Text: " + inputText + "\n"
                + "Encrypted Text: " + new String(encryptedText) + "\n"
                + "Decrypted Text: " + new String(decryptedText);
        JOptionPane.showMessageDialog(null, message);
        System.exit(0);
    }
}
    


PRACTICAL 4 
RSA EN AND DE

import java.math.BigInteger;
import java.security.SecureRandom;

public class RSA {

    private BigInteger p, q, n, phi, e, d;
    private SecureRandom random;

    public RSA(int bitLength) {
        random = new SecureRandom();
        p = new BigInteger(bitLength, 100, random);
        q = new BigInteger(bitLength, 100, random);
        n = p.multiply(q);
        phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
        e = new BigInteger("65537"); // Common choice for e
        if (phi.gcd(e).compareTo(BigInteger.ONE) > 0) {
            e = BigInteger.probablePrime(bitLength / 2, random);
        }
        d = e.modInverse(phi);
        System.out.println("Prime numbers (p, q): " + p + ", " + q);
        System.out.println("Public Key (n, e): (" + n + ", " + e + ")");
        System.out.println("Private Key (n, d): (" + n + ", " + d + ")");
    }

    public BigInteger encrypt(BigInteger message) {
        return message.modPow(e, n); // Cipher = message^e mod n
    }

    public BigInteger decrypt(BigInteger cipher) {
        return cipher.modPow(d, n); // Message = cipher^d mod n
    }

    public static void main(String[] args) {
        int bitLength = 512;
        RSA rsa = new RSA(bitLength);
        BigInteger message = new BigInteger("15");
        System.out.println("\nOriginal Message: " + message);
        BigInteger encryptedMessage = rsa.encrypt(message);
        System.out.println("Encrypted Message: " + encryptedMessage);
        BigInteger decryptedMessage = rsa.decrypt(encryptedMessage);
        System.out.println("Decrypted Message: " + decryptedMessage);
    }
}


PRACTICAL 5

DEFFIE-HELLMAN

import java.util.*;
import java.math.BigInteger.*;
import java.math.*;

public class Diffie {

    public static void main(String[] args) {
        BigInteger A, B, x, y, g, n, K1, K2;
        Scanner s = new Scanner(System.in);
        System.out.println("Enter the first prime number : ");
        n = s.nextBigInteger();
        System.out.println("Enter the second prime number : ");
        g = s.nextBigInteger();
        System.out.println("Enter A secret number : ");
        x = s.nextBigInteger();
        System.out.println("Enter B secret number : ");
        y = s.nextBigInteger();
        A = g.modPow(x, n);
        B = g.modPow(y, n);
        K2 = A.modPow(y, n);
        K1 = B.modPow(x, n);
        System.out.println("Sender key: " + K1);
        System.out.println("Receiver key: " + K2);
    }
}


PRACTICAL 6

HMAC-SHAI

import static java.security.CryptoPrimitive.MAC;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.util.Formatter;
import javax.crypto.Mac;
import javax.crypto.SecretKeyFactorySpi;
import javax.crypto.spec.SecretKeySpec;

public class Hmacshai {

    private static final String HMAC_SHA1_ALGORITHM = "HmacSHA1";

    private static String toHexString(byte[] bytes) {
        Formatter formatter = new Formatter();
        for (byte b : bytes) {
            formatter.format("%02x", b);
        }
        return formatter.toString();
    }

    public static String calculateHMAC(String data, String key) throws SignatureException,
            NoSuchAlgorithmException, InvalidKeyException {
        SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA1_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
        mac.init(signingKey);
        return toHexString(mac.doFinal(data.getBytes()));
    }

    public static void main(String[] args) throws SignatureException, NoSuchAlgorithmException,
            InvalidKeyException {
        String hmac = calculateHMAC("Shivangi", "key");
        System.out.println(hmac);
    }
}


PRACTICAL 7 

MD5

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
public class MD5
{
    public static void main(String[] args)
    {
        System.out.println("For null:"+ md5(""));
        System.out.println("For simple text :"+ md5("karan"));
        System.out.println("For simple number:"+md5("1234"));
    }
    public static String md5(String input)
    {
        String md5 = null;
        if(null == input) return null;
        try
        {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(input.getBytes(),0,input.length());
            md5 = new BigInteger(1,digest.digest()).toString(16);
        }
        catch (NoSuchAlgorithmException ex)
        {
            ex.printStackTrace();
        }
        return md5;
    }
   
}



PRACTICAL 8

SSL

import java.net.*;
import java.io.*;
import javax.net.ssl.*;

public class SSLSocketClient {

    public static void main(String[] args) throws Exception {
        try {
            SSLSocketFactory factory
                    = (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket socket = (SSLSocket) factory.createSocket("www.versign.com", 443);

            socket.startHandshake();

            PrintWriter out = new PrintWriter(
                    new BufferedWriter(
                            new OutputStreamWriter(
                                    socket.getOutputStream())));

            out.print("GET/HTTP/1.0");
            out.println();
            out.flush();
            if (out.checkError()) {
                System.out.println(
                        "SSLSocketClient: java.io.PrintWriter error");
            }

            /* read response */
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(
                            socket.getInputStream()));

            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                System.out.println(inputLine);
            }
            in.close();
            out.close();
            socket.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
